<?php

/**
 * @file
 * Install file for core.
 */

use Drupal\Core\Site\Settings;
use Drupal\Core\Utility\UpdateException;
use Drupal\taxonomy\Entity\Term;

/**
 * Implements hook_install().
 */
function vicgovau_core_install() {
  $functions = get_defined_functions();
  foreach ($functions['user'] as $function) {
    if (strpos($function, 'vicgovau_core_update_') === 0) {
      call_user_func($function);
    }
  }
}

/**
 * Helper to enable modules.
 */
function vicgovau_core_enable_modules($is_install = FALSE) {
  $environment = Settings::get('environment');

  if ($is_install) {
    if ($environment == 'development') {
      vicgovau_core_install_module('shield');
    }

    if ($environment == 'ci') {
      vicgovau_core_install_module('tide_test');
    }

    if ($environment == 'ci' || $environment == 'development') {
      vicgovau_core_install_module('vicgovau_demo');
    }
  }
  else {
    // Enable 'config_devel' in local environment only.
    if ($environment == 'local') {
      vicgovau_core_install_module('config_devel');
    }

    // Enable 'tide_test' in local and CI environments.
    if ($environment == 'local' || $environment == 'ci') {
      vicgovau_core_install_module('tide_test');
    }

    if ($environment == 'local' || $environment == 'ci' || $environment == 'development') {
      vicgovau_core_install_module('vicgovau_demo');
    }
  }
}

/**
 * Helper to install a module.
 *
 * @param string $module
 *   Module name.
 *
 * @throws \Exception
 *   When module was not installed.
 */
function vicgovau_core_install_module($module) {
  $result = \Drupal::service('module_installer')->install([$module]);
  if (!$result) {
    throw new \Exception(sprintf('Unable to install module %s', $module));
  }

  /** @var \Drupal\Core\Extension\ModuleHandler $moduleHandler */
  $moduleHandler = \Drupal::service('module_handler');
  if (!$moduleHandler->moduleExists($module)) {
    throw new \Exception(sprintf('Unable to validate install for module %s', $module));
  }
}

/**
 * Creates sites and sections.
 */
function vicgovau_core_update_8001() {
  $sites = [
    'vic.gov.au' => [],
  ];

  $weight = 0;
  foreach ($sites as $site => $sections) {
    $term_site = Term::create([
      'name' => $site,
      'vid' => 'sites',
      'weight' => $weight,
    ]);
    $term_site->save();

    foreach ($sections as $section) {
      $term_section = Term::create([
        'name' => $section,
        'vid' => 'sites',
        'parent' => [$term_site->id()],
      ]);
      $term_section->save();
    }
    $weight++;
  }
}

/**
 * Assigns site_admin role to selected users.
 */
function vicgovau_core_update_8003() {
  $user_names = [
    'jessica.le',
  ];

  foreach ($user_names as $user_name) {
    /** @var \Drupal\user\Entity\User $user */
    $user = user_load_by_name($user_name);
    if (!$user) {
      throw new UpdateException(sprintf('Unable to update role for user "%s"', $user_name));
    }
    $user->addRole('site_admin');
    $user->removeRole('administrator');
    $user->removeRole('approver');
    $user->removeRole('editor');
    $user->removeRole('previewer');
    $user->save();
  }
}

/**
 * Remove the sitemap.xml entry from the traffic registry table [SDPA-453].
 */
function vicgovau_core_update_8004() {
  $moduleHandler = \Drupal::service('module_handler');
  if ($moduleHandler->moduleExists('purge_queuer_url')) {
    db_delete('purge_queuer_url')
      ->condition('url', 'sitemap.xml')
      ->execute();
  }
}

/**
 * Clear Traffic registry because of URLs_queuer config changes [SDPA-465].
 */
function vicgovau_core_update_8005() {
  $moduleHandler = \Drupal::service('module_handler');
  if ($moduleHandler->moduleExists('purge_queuer_url')) {
    \Drupal::service('purge_queuer_url.registry')->clear();
  }
}
