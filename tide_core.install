<?php

/**
 * @file
 * Installation functions for Tide Core.
 */

use Drupal\filter\Entity\FilterFormat;
use Drupal\taxonomy\Entity\Term;
use Drupal\user\Entity\User;
use Drupal\workflows\Entity\Workflow;
use Drupal\Core\Config\FileStorage;
use Drupal\field\Entity\FieldStorageConfig;
use Drupal\field\Entity\FieldConfig;
use Drupal\scheduled_transitions\ScheduledTransitionsPermissions;
use Drupal\user\Entity\Role;
use Drupal\user\UserInterface;

/**
 * Implements hook_install().
 */
function tide_core_install() {
  // Assign user 1 the "administrator" role.
  $user = User::load(1);
  $user->roles[] = 'administrator';
  $user->save();

  // Override default Plain Text format from Core.
  try {
    $plain_text = FilterFormat::load('plain_text');
    if ($plain_text) {
      module_load_include('inc', 'tide_core', 'includes/helpers');
      $config_location = [drupal_get_path('module', 'tide_core') . '/config/optional'];
      _tide_import_single_config('filter.format.plain_text', $config_location);
    }
  }
  catch (Exception $exception) {
    watchdog_exception('tide_core', $exception);
  }

  // Don't do anything else during config sync.
  if (\Drupal::isConfigSyncing()) {
    return;
  }

  // Restrict user registration to admin role creation.
  \Drupal::configFactory()
    ->getEditable('user.settings')
    ->set('register', USER_REGISTER_ADMINISTRATORS_ONLY)
    ->save(TRUE);

  // Creates terms for Topic vocabulary.
  _tide_core_create_topic_terms();

  // Update default Editorial workflow of Content Moderation.
  _tide_core_update_editorial_workflow();

  $functions = get_defined_functions();
  foreach ($functions['user'] as $function) {
    if (strpos($function, 'tide_core_update_') === 0) {
      // We don't want the tide_core_update_8015 to run during the CI.
      if ($function == 'tide_core_update_8015') {
        continue;
      }
      call_user_func($function);
    }
  }
}

/**
 * Creates terms for Topic vocabulary.
 */
function _tide_core_create_topic_terms() {
  $vid = 'topic';

  $terms = [
    'Arts',
    'Business',
    'Education',
  ];
  foreach ($terms as $term) {
    Term::create([
      'name' => $term,
      'vid' => $vid,
      'parent' => [],
    ])->save();
  }
}

/**
 * Update default Editorial workflow of Content Moderation.
 */
function _tide_core_update_editorial_workflow() {
  $editorial_workflow = Workflow::load('editorial');
  if ($editorial_workflow) {
    $type_settings = [
      'states' => [
        'draft' => [
          'label' => 'Draft',
          'published' => FALSE,
          'default_revision' => FALSE,
          'weight' => -10,
        ],
        'needs_review' => [
          'published' => FALSE,
          'default_revision' => FALSE,
          'label' => 'Needs Review',
          'weight' => -9,
        ],
        'published' => [
          'label' => 'Published',
          'published' => TRUE,
          'default_revision' => TRUE,
          'weight' => -8,
        ],
        'archived' => [
          'label' => 'Archived',
          'weight' => -7,
          'published' => FALSE,
          'default_revision' => TRUE,
        ],
        'archive_pending' => [
          'label' => 'Archive pending',
          'published' => FALSE,
          'default_revision' => FALSE,
          'weight' => -6,
        ],
      ],
      'transitions' => [
        'create_archive_pending' => [
          'label' => 'Archive pending',
          'from' => ['draft', 'published', 'needs_review'],
          'to' => 'archive_pending',
          'weight' => -11,
        ],
        'create_new_draft' => [
          'label' => 'Create New Draft',
          'from' => ['draft', 'published', 'archive_pending'],
          'to' => 'draft',
          'weight' => -10,
        ],
        'needs_review' => [
          'label' => 'Needs Review',
          'from' => ['draft', 'archive_pending'],
          'to' => 'needs_review',
          'weight' => -9,
        ],
        'needs_review_draft' => [
          'label' => 'Send back to Draft',
          'from' => ['needs_review'],
          'to' => 'draft',
          'weight' => -8,
        ],
        'publish' => [
          'label' => 'Publish',
          'from' => ['draft', 'needs_review', 'published'],
          'to' => 'published',
          'weight' => -7,
        ],
        'archive' => [
          'label' => 'Archive',
          'from' => ['published'],
          'to' => 'archived',
          'weight' => -6,
        ],
        'archived_draft' => [
          'label' => 'Restore to Draft',
          'from' => ['archived'],
          'to' => 'draft',
          'weight' => -5,
        ],
        'archived_published' => [
          'label' => 'Restore',
          'from' => ['archived', 'archive_pending'],
          'to' => 'published',
          'weight' => -4,
        ],
      ],
      'entity_types' => [],
    ];
    $editorial_workflow->set('type_settings', $type_settings);
    $editorial_workflow->save();
  }
}

/**
 * Implements hook_update_dependencies().
 */
function tide_core_update_dependencies() {
  $dependencies['tide_core'][8007] = ['system' => 8805];
  // Some sites have already run 8007. Need to check for 8016 too.
  $dependencies['tide_core'][8016] = ['system' => 8805];
  $dependencies['tide_landing_page'][8010] = ['system' => 8805];
  $dependencies['tide_landing_page'][8015] = ['system' => 8805];
  $dependencies['tide_landing_page'][8016] = ['system' => 8805];
  $dependencies['tide_site'][8004] = ['system' => 8805];

  return $dependencies;
}

/**
 * Add field storage for Show Related Content and Show Social Sharing.
 */
function tide_core_update_8001() {
  module_load_include('inc', 'tide_core', 'includes/helpers');
  $config_location = [drupal_get_path('module', 'tide_core') . '/config/install'];
  _tide_import_single_config('field.storage.node.field_show_related_content', $config_location);
  _tide_import_single_config('field.storage.node.field_show_social_sharing', $config_location);
}

/**
 * Add field storage for Featured Image.
 */
function tide_core_update_8002() {
  module_load_include('inc', 'tide_core', 'includes/helpers');
  $config_location = [drupal_get_path('module', 'tide_core') . '/config/install'];
  _tide_import_single_config('field.storage.node.field_featured_image', $config_location);
}

/**
 * Enable Pathauto with default config.
 */
function tide_core_update_8003() {
  /** @var \Drupal\Core\Extension\ModuleInstallerInterface $module_installer */
  $module_installer = \Drupal::service('module_installer');
  $module_installer->install(['pathauto']);
  module_load_include('inc', 'tide_core', 'includes/helpers');
  $config_location = [drupal_get_path('module', 'tide_core') . '/config/optional'];
  _tide_import_single_config('pathauto.pattern.content_title', $config_location);
}

/**
 * Import ClamAV default config.
 */
function tide_core_update_8004() {
  module_load_include('inc', 'tide_core', 'includes/helpers');
  $config_location = [drupal_get_path('module', 'tide_core') . '/config/optional'];
  _tide_import_single_config('clamav.settings', $config_location);
}

/**
 * Enable PRLP with default config.
 */
function tide_core_update_8005() {
  /** @var \Drupal\Core\Extension\ModuleInstallerInterface $module_installer */
  $module_installer = \Drupal::service('module_installer');
  $module_installer->install(['prlp']);
  module_load_include('inc', 'tide_core', 'includes/helpers');
  $config_location = [drupal_get_path('module', 'tide_core') . '/config/optional'];
  _tide_import_single_config('prlp.settings', $config_location);
}

/**
 * Enable the blockquote template available to all Node types.
 */
function tide_core_update_8006() {
  if ($wysiwyg_template = \Drupal::entityTypeManager()
    ->getStorage('wysiwyg_template')
    ->load('blockquote')) {
    if (count($wysiwyg_template->getNodeTypes()) > 0) {
      $wysiwyg_template->set('node_types', [])->save();
    }
  }
}

/**
 * Delete and uninstall all scheduled_update entities.
 */
function tide_core_update_8007() {
  if (\Drupal::moduleHandler()->moduleExists('scheduled_updates')) {
    // Delete content entities.
    $scheduled_updates = \Drupal::entityTypeManager()
      ->getStorage('scheduled_update')
      ->loadMultiple();
    foreach ($scheduled_updates as $scheduled_update) {
      $scheduled_update->delete();
    }
    // Delete configs.
    $scheduled_fields = ['scheduled_archiving', 'scheduled_publishing'];
    foreach ($scheduled_fields as $scheduled_field) {
      $field_storage = FieldStorageConfig::loadByName('node', $scheduled_field);
      if (!empty($field_storage)) {
        $bundles = $field_storage->getBundles();
        foreach ($bundles as $bundle) {
          $field = FieldConfig::loadByName('node', $bundle, $scheduled_field);
          if (!empty($field)) {
            $field->delete();
          }
        }
        field_purge_batch(10);
      }
    }
  }
}

/**
 * Change %uid token to %user in login redirect URL of PRLP settings.
 */
function tide_core_update_8008() {
  // Issue https://www.drupal.org/project/prlp/issues/2785087 was fixed.
  $config = \Drupal::configFactory()->getEditable('prlp.settings');
  $login_destination = $config->get('login_destination');
  if (!empty($login_destination) && strpos($login_destination, '%uid') !== FALSE) {
    $login_destination = str_replace('%uid', '%user', $login_destination);
    $config->set('login_destination', $login_destination)->save();
  }
}

/**
 * Create pathauto pattern for Taxonomy terms.
 *
 * Make no op hook for patched update.
 */
function tide_core_update_8009() {
}

/**
 * Enable scheduled_transitions module.
 */
function tide_core_update_8010() {
  if (!\Drupal::moduleHandler()->moduleExists('scheduled_transitions')) {
    $module_installer = \Drupal::service('module_installer');
    $module_installer->install(['scheduled_transitions']);
  }
}

/**
 * Update og:image metatag for node.
 */
function tide_core_update_8011() {
  $metatag = \Drupal::configFactory()->getEditable('metatag.metatag_defaults.node');
  $og_image = $metatag->get('tags.og_image');
  if (!$og_image) {
    $metatag->set('tags.og_image', '[node:field_featured_image:entity:field_media_image:entity:url]')
      ->save();
  }
}

/**
 * Imports default permissions to approver and site_admin.
 */
function tide_core_update_8012() {
  $roles = ['approver', 'site_admin'];
  $node_types = \Drupal::entityTypeManager()
    ->getStorage('node_type')
    ->loadMultiple();
  foreach ($roles as $role) {
    $permissions = [];
    foreach ($node_types as $type => $details) {
      $permissions[] = ScheduledTransitionsPermissions::viewScheduledTransitionsPermission('node', $type);
      $permissions[] = ScheduledTransitionsPermissions::addScheduledTransitionsPermission('node', $type);
    }
    $permissions[] = 'view all scheduled transitions';
    user_role_grant_permissions(Role::load($role)->id(), $permissions);
  }
}

/**
 * Fix permissions for Previewers.
 */
function tide_core_update_8013() {
  $role = Role::load('previewer');
  if ($role) {
    $role->grantPermission('view all revisions');
    $role->grantPermission('view any unpublished content');
    $role->grantPermission('view latest version');
    $role->save();
  }
}

/**
 * Enable link_field_autocomplete_filter module.
 */
function tide_core_update_8014() {
  if (!\Drupal::moduleHandler()->moduleExists('link_field_autocomplete_filter')) {
    $module_installer = \Drupal::service('module_installer');
    $module_installer->install(['link_field_autocomplete_filter']);
  }
}

/**
 * ClamAV configuration is updated to use central service.
 */
function tide_core_update_8015() {
  if (\Drupal::moduleHandler()->moduleExists('clamav')) {
    $config_factory = \Drupal::configFactory();
    $config = $config_factory->getEditable('clamav.settings');
    $config->set('scan_mode', 0);
    $config->set('mode_daemon_tcpip.hostname', 'clamav.sdp-central-clamav-master.svc.cluster.local');
    $config->save();
  }
}

/**
 * Fix permissions for to access video entity browser.
 */
function tide_core_update_8016() {
  $role = Role::load('approver');
  if ($role) {
    $role->grantPermission('access tide_embedded_video_browser entity browser pages');
    $role->save();
  }
  $role = Role::load('editor');
  if ($role) {
    $role->grantPermission('access tide_embedded_video_browser entity browser pages');
    $role->save();
  }
  $role = Role::load('site_admin');
  if ($role) {
    $role->grantPermission('access tide_embedded_video_browser entity browser pages');
    $role->save();
  }
}

/**
 * Uninstall Scheduled Update modules.
 */
function tide_core_update_8017() {
  $modules = [
    'scheduled_updates',
    'content_moderation_scheduled_updates',
  ];

  $module_installer = \Drupal::service('module_installer');
  $module_installer->uninstall($modules);
}

/**
 * Update Scheduled Transitions View.
 */
function tide_core_update_8018() {
  $title_fields = [
    'label',
    'display.default.display_options.title',
  ];
  $config_factory = \Drupal::configFactory();
  $config = $config_factory->getEditable('views.view.scheduled_transitions');
  // Update field labels/titles.
  foreach ($title_fields as $field) {
    $config->set($field, 'Scheduled update list');
  }
  // Update empty View results.
  $config->set('display.default.display_options.empty.area.content.value', 'There are no scheduled updates yet.');
  $config->save();
}

/**
 * No-op update - moved to tide_workflow_notification.
 */
function tide_core_update_8019() {
}

/**
 * Disable moderated_content view.
 */
function tide_core_update_8020() {
  $view = \Drupal::entityTypeManager()->getStorage('view')->load('moderated_content');
  if ($view) {
    $view->setStatus(FALSE)->save();
  }
}

/**
 * Import tide_core_moderated_content_filters.
 */
function tide_core_update_8021() {
  $view = 'views.view.tide_core_moderated_content_filters';
  $config_path = drupal_get_path('module', 'tide_core') . '/config/install';
  $source = new FileStorage($config_path);
  $config_storage = \Drupal::service('config.storage');
  $config_storage->write($view, $source->read($view));
}

/**
 * Make user creation require admin approval
 */
function tide_core_update_8022() {
  // Don't do anything else during config sync.
  if (\Drupal::isConfigSyncing()) {
    return;
  }

  // Restrict user registration to admin role creation.
  \Drupal::configFactory()
    ->getEditable('user.settings')
    ->set('register', UserInterface::REGISTER_VISITORS_ADMINISTRATIVE_APPROVAL)
    ->save(TRUE);
}