<?php

/**
 * @file
 * Tide Site module functionality.
 */

use Drupal\Core\Entity\FieldableEntityInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\taxonomy\Entity\Term;
use Drupal\tide_site\TideSiteFields;
use Drupal\tide_site\TideSiteMenuAutocreate;
use Drupal\views\ViewExecutable;

/**
 * Implements hook_entity_bundle_create().
 */
function tide_site_entity_bundle_create($entity_type_id, $bundle) {
  /** @var \Drupal\tide_site\TideSiteFields $fields_helper */
  $fields_helper = \Drupal::service('tide_site.fields');

  // Add the new bundle to file_site_homepage entity reference of Sites.
  if ($entity_type_id == 'node') {
    $fields_helper->addContentTypesToSiteHomepageField([$bundle]);
  }

  // Map of which fields should be created for which entity types.
  $map = [
    'node' => [$fields_helper::FIELD_SITE, $fields_helper::FIELD_PRIMARY_SITE],
    'media' => [$fields_helper::FIELD_SITE],
  ];

  foreach ($map as $entity_type_map => $fields_list) {
    if ($entity_type_id != $entity_type_map) {
      continue;
    }

    foreach ($fields_list as $field_name) {
      try {
        // Create/update form display. View display is not created to avoid
        // unexpected fields appearing in UI.
        $field_config = $fields_helper->provisionField($field_name, $entity_type_id, $bundle);
        \Drupal::messenger()->addMessage(t('Added field %name to the %bundle %entity_type entity and form display.', [
          '%name' => $field_config['field_name'],
          '%entity_type' => $entity_type_id,
          '%bundle' => $bundle,
        ]));
      }
      catch (\Exception $e) {
        \Drupal::messenger()->addMessage(t('Unable to add a field %name to the %bundle %entity_type entity: @message', [
          '%name' => $field_name,
          '%entity_type' => $entity_type_id,
          '%bundle' => $bundle,
          '@message' => $e->getMessage(),
        ]), 'error');
      }
    }
  }

}

/**
 * Implements hook_field_widget_form_alter().
 *
 * @todo: Extract into a service.
 */
function tide_site_field_widget_form_alter(&$element, FormStateInterface $form_state, $context) {
  $field_definition = $context['items']->getFieldDefinition();

  // Restrict options to 2 levels of depth for Site field.
  if (TideSiteFields::isSiteField($field_definition->getName(), TideSiteFields::FIELD_SITE)) {
    $tree = \Drupal::entityManager()->getStorage('taxonomy_term')->loadTree('sites', 0, 2);
    if (isset($element['#options'])) {
      $element['#options'] = array_intersect_key($element['#options'], array_flip(array_column($tree, 'tid')));
    }
    else {
      $element['#options'] = array_flip(array_column($tree, 'tid'));
    }
  }

  // Restrict options to 1 level of depth for Primary Site field.
  if (TideSiteFields::isSiteField($field_definition->getName(), TideSiteFields::FIELD_PRIMARY_SITE)) {
    $tree = \Drupal::entityManager()->getStorage('taxonomy_term')->loadTree('sites', 0, 1);
    if (isset($element['#options'])) {
      $element['#options'] = array_intersect_key($element['#options'], array_flip(array_column($tree, 'tid')));
    }
    else {
      $element['#options'] = array_flip(array_column($tree, 'tid'));
    }
  }
}

/**
 * Implements hook_form_taxonomy_overview_terms_alter().
 */
function tide_site_form_taxonomy_overview_terms_alter(&$form, FormStateInterface $form_state, $form_id) {
  $form['#validate'][] = '_tide_site_form_taxonomy_overview_terms_validate';
}

/**
 * Validation handler for taxonomy term overview form.
 *
 * @todo: Extract into a service.
 */
function _tide_site_form_taxonomy_overview_terms_validate(&$form, FormStateInterface $form_state) {
  $max_depth = 1;

  $vocabulary = $form_state->get(['taxonomy', 'vocabulary']);
  if ($vocabulary->id() == 'sites') {
    $invalid_tids = [];
    $terms = $form_state->getValue('terms');
    foreach ($terms as $term) {
      if ($term['term']['depth'] > $max_depth) {
        $invalid_tids[] = $term['term']['tid'];
      }
    }

    if (!empty($invalid_tids)) {
      $invalid_terms = Term::loadMultiple($invalid_tids);
      $names = [];
      /** @var \Drupal\taxonomy\Entity\Term $invalid_term */
      foreach ($invalid_terms as $invalid_term) {
        $names[] = $invalid_term->getName();
      }

      $form_state->setError($form, \Drupal::translation()->formatPlural(
        count($names),
        'Term %items cannot reside deeper than @max levels.',
        'Terms %items cannot reside deeper than @max levels.', [
          '%items' => implode(', ', $names),
          '@max' => $max_depth + 1,
        ]
      ));
    }
  }
}

/**
 * Implements hook_form_taxonomy_term_form_alter().
 */
function tide_site_form_taxonomy_term_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  if ($form_id == 'taxonomy_term_sites_form') {
    /** @var \Drupal\tide_site\TideSiteMenuAutocreate $menu_helper */
    $menu_helper = \Drupal::service('tide_site.menu_autocreate');
    $altered = $menu_helper->alterFormFields($form, [
      'field_site_main_menu',
      'field_site_footer_menu',
    ]);

    if (!empty($altered)) {
      $form['actions']['submit']['#submit'][] = 'tide_site_form_taxonomy_term_form_submit';
    }
  }
}

/**
 * Submit handler for term page.
 *
 * Handles auto creation of menus.
 */
function tide_site_form_taxonomy_term_form_submit(array $form, FormStateInterface $form_state) {
  $values = $form_state->getValues();

  /** @var \Drupal\tide_site\TideSiteMenuAutocreate $menu_helper */
  $menu_helper = \Drupal::service('tide_site.menu_autocreate');

  $message_list = $menu_helper->processFormValues($form, $values);
  foreach ($message_list as $type => $messages) {
    foreach ($messages as $message) {
      \Drupal::messenger()->addMessage($message, $type);
    }
  }
}

/**
 * Implements hook_views_pre_view().
 */
function tide_site_views_pre_view(ViewExecutable $view, $display_id, array &$args) {
  // Add Site field and exposed filter to the supported views.
  $views = [
    'media' => [
      'media_page_list',
    ],
    'tide_media_browser' => [
      'media_browser',
      'image_browser',
      'document_browser',
    ],
  ];

  $view_id = $view->id();
  if (isset($views[$view_id]) && in_array($display_id, $views[$view_id])) {
    $site_filter = [
      'exposed' => TRUE,
      'expose' => [
        'operator_id' => 'field_media_site_target_id_op',
        'label' => t('Site'),
        'id' => 'media__field_media_site',
        'use_operator' => FALSE,
        'operator' => 'field_media_site_target_id_op',
        'identifier' => 'field_media_site_target_id',
        'required' => FALSE,
        'remember' => FALSE,
        'multiple' => FALSE,
      ],
      'group_type' => 'group',
      'operator' => 'or',
      'group' => 1,
      'vid' => 'sites',
      'type' => 'select',
      'reduce_duplicates' => TRUE,
      'limit' => TRUE,
      'hierarchy' => TRUE,
    ];
    $view->addHandler($display_id, 'filter', 'media__field_media_site', 'field_media_site_target_id', $site_filter, 'field_media_site_target_id');

    $site_field = [
      'label' => t('Site'),
      'group_rows' => TRUE,
      'multi_type' => 'ul',
      'plugin_id' => 'field',
    ];
    $view->addHandler($display_id, 'field', 'media__field_media_site', 'field_media_site', $site_field, 'field_media_site');
  }
}

/**
 * Implements hook_config_ignore_settings_alter().
 */
function tide_site_config_ignore_settings_alter(array &$settings) {
  // Ignore all autocreated site menus.
  $settings[] = 'system.menu.' . TideSiteMenuAutocreate::SITE_MENU_PREFIX . '*';
}

/**
 * Implements hook_tide_link_enhancer_undo_transform_alter().
 *
 * @see \Drupal\tide_api\Plugin\jsonapi\FieldEnhancer\LinkEnhancer::doUndoTransform()
 */
function tide_site_tide_link_enhancer_undo_transform_alter(&$data, &$context) {
  /** @var \Drupal\tide_site\TideSiteHelper $helper */
  $helper = \Drupal::service('tide_site.helper');
  try {
    if (!empty($data['entity']['entity_type']) && $helper->isSupportedEntityType($data['entity']['entity_type'])) {
      /** @var \Drupal\Core\Entity\FieldableEntityInterface $entity */
      $entity = \Drupal::entityTypeManager()
        ->getStorage($data['entity']['entity_type'])
        ->load($data['entity']['entity_id']);
      if ($entity && $entity instanceof FieldableEntityInterface) {
        $site = NULL;

        // Check if the link belongs to the current site.
        $request = \Drupal::request();
        $site_id = $request->get('site');
        if ($site_id && $helper->isEntityBelongToSite($entity, $site_id)) {
          // Returns the relative URL.
          $data['origin_url'] = $data['url'];
          $data['url'] = $entity->toUrl('canonical', [
            'absolute' => FALSE,
          ])->toString();

          return;
        }

        // It doesn't. Fetch its primary site instead.
        $site = $helper->getEntityPrimarySite($entity);

        $domains = $helper->getSiteDomains($site);
        // The first domain is always for production environment.
        $domain = reset($domains);
        if ($domain) {
          $site_url = $request->getScheme() . '://' . $domain;
          $data['origin_url'] = $data['url'];
          $data['url'] = $entity->toUrl('canonical', [
            'absolute' => TRUE,
            'base_url' => $site_url,
          ])->toString();
        }
      }
    }
  }
  catch (Exception $exception) {
    watchdog_exception('tide_site', $exception);
  }
}

/**
 * Implements hook_tide_link_enhancer_transform_alter().
 *
 * @see \Drupal\tide_api\Plugin\jsonapi\FieldEnhancer\LinkEnhancer::doTransform()
 */
function tide_site_tide_link_enhancer_transform_alter(&$value, &$context) {
  unset($value['origin_url']);
}
