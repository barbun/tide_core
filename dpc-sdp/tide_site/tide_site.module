<?php

/**
 * @file
 * Tide Site module functionality.
 */

use Drupal\Core\Form\FormStateInterface;
use Drupal\taxonomy\Entity\Term;
use Drupal\tide_site\TideSiteFields;

/**
 * Implements hook_entity_bundle_create().
 */
function tide_site_entity_bundle_create($entity_type_id, $bundle) {
  /** @var \Drupal\tide_site\TideSiteFields $fields_helper */
  $fields_helper = \Drupal::service('tide_site.fields');

  // Map of which fields should be created for which entity types.
  $map = [
    'node' => [$fields_helper::FIELD_SITE, $fields_helper::FIELD_PRIMARY_SITE],
    'media' => [$fields_helper::FIELD_SITE],
  ];

  foreach ($map as $entity_type_map => $fields_list) {
    if ($entity_type_id != $entity_type_map) {
      continue;
    }

    foreach ($fields_list as $field_name) {
      try {
        // Create/update form display. View display is not created to avoid
        // unexpected fields appearing in UI.
        $field_config = $fields_helper->provisionField($field_name, $entity_type_id, $bundle);
        drupal_set_message(t('Added field %name to the %bundle %entity_type entity and form display.', [
          '%name' => $field_config['field_name'],
          '%entity_type' => $entity_type_id,
          '%bundle' => $bundle,
        ]));
      }
      catch (\Exception $e) {
        drupal_set_message(t('Unable to add a field %name to the %bundle %entity_type entity: @message', [
          '%name' => $field_name,
          '%entity_type' => $entity_type_id,
          '%bundle' => $bundle,
          '@message' => $e->getMessage(),
        ]), 'error');
      }
    }
  }

}

/**
 * Implements hook_field_widget_form_alter().
 *
 * @todo: Extract into a service.
 */
function tide_site_field_widget_form_alter(&$element, FormStateInterface $form_state, $context) {
  $field_definition = $context['items']->getFieldDefinition();

  // Restrict options to 2 levels of depth for Site field.
  if (TideSiteFields::isSiteField($field_definition->getName(), TideSiteFields::FIELD_SITE)) {
    $tree = \Drupal::entityManager()->getStorage('taxonomy_term')->loadTree('sites', 0, 2);
    if (isset($element['#options'])) {
      $element['#options'] = array_intersect_key($element['#options'], array_flip(array_column($tree, 'tid')));
    }
    else {
      $element['#options'] = array_flip(array_column($tree, 'tid'));
    }
  }

  // Restrict options to 1 level of depth for Primary Site field.
  if (TideSiteFields::isSiteField($field_definition->getName(), TideSiteFields::FIELD_PRIMARY_SITE)) {
    $tree = \Drupal::entityManager()->getStorage('taxonomy_term')->loadTree('sites', 0, 1);
    if (isset($element['#options'])) {
      $element['#options'] = array_intersect_key($element['#options'], array_flip(array_column($tree, 'tid')));
    }
    else {
      $element['#options'] = array_flip(array_column($tree, 'tid'));
    }
  }
}

/**
 * Implements hook_form_taxonomy_overview_terms_alter().
 */
function tide_site_form_taxonomy_overview_terms_alter(&$form, FormStateInterface $form_state, $form_id) {
  $form['#validate'][] = '_tide_site_form_taxonomy_overview_terms_validate';
}

/**
 * Validation handler for taxonomy term overview form.
 *
 * @todo: Extract into a service.
 */
function _tide_site_form_taxonomy_overview_terms_validate(&$form, FormStateInterface $form_state) {
  $max_depth = 1;

  $vocabulary = $form_state->get(['taxonomy', 'vocabulary']);
  if ($vocabulary->id() == 'sites') {
    $invalid_tids = [];
    $terms = $form_state->getValue('terms');
    foreach ($terms as $term) {
      if ($term['term']['depth'] > $max_depth) {
        $invalid_tids[] = $term['term']['tid'];
      }
    }

    if (!empty($invalid_tids)) {
      $invalid_terms = Term::loadMultiple($invalid_tids);
      $names = [];
      /** @var \Drupal\taxonomy\Entity\Term $invalid_term */
      foreach ($invalid_terms as $invalid_term) {
        $names[] = $invalid_term->getName();
      }

      $form_state->setError($form, \Drupal::translation()->formatPlural(
        count($names),
        'Term %items cannot reside deeper than @max levels.',
        'Terms %items cannot reside deeper than @max levels.', [
          '%items' => implode(', ', $names),
          '@max' => $max_depth + 1,
        ]
      ));
    }
  }
}

/**
 * Implements hook_form_taxonomy_term_form_alter().
 */
function tide_site_form_taxonomy_term_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  if ($form_id == 'taxonomy_term_sites_form') {
    /** @var \Drupal\tide_site\TideSiteMenuAutocreate $menu_helper */
    $menu_helper = \Drupal::service('tide_site.menu_autocreate');
    $altered = $menu_helper->alterFormFields($form, [
      'field_site_main_menu',
      'field_site_footer_menu',
    ]);

    if (!empty($altered)) {
      $form['actions']['submit']['#submit'][] = 'tide_site_form_taxonomy_term_form_submit';
    }
  }
}

/**
 * Submit handler for term page.
 *
 * Handles auto creation of menus.
 */
function tide_site_form_taxonomy_term_form_submit(array $form, FormStateInterface $form_state) {
  $values = $form_state->getValues();

  /** @var \Drupal\tide_site\TideSiteMenuAutocreate $menu_helper */
  $menu_helper = \Drupal::service('tide_site.menu_autocreate');

  $message_list = $menu_helper->processFormValues($form, $values);
  foreach ($message_list as $type => $messages) {
    foreach ($messages as $message) {
      drupal_set_message($message, $type);
    }
  }
}
