<?php

/**
 * @file
 * Install file for core.
 */

use Drupal\Core\Site\Settings;
use Drupal\Core\Utility\UpdateException;
use Drupal\taxonomy\Entity\Term;
use Drupal\field\Entity\FieldConfig;
use Drupal\field\Entity\FieldStorageConfig;

/**
 * Implements hook_install().
 */
function vicgovau_core_install() {
  $functions = get_defined_functions();
  foreach ($functions['user'] as $function) {
    if (strpos($function, 'vicgovau_core_update_') === 0) {
      call_user_func($function);
    }
  }
}

/**
 * Helper to enable modules.
 */
function vicgovau_core_enable_modules($is_install = FALSE) {
  $environment = Settings::get('environment');

  if ($is_install) {
    if ($environment == 'development') {
      vicgovau_core_install_module('shield');
    }

    if ($environment == 'ci') {
      vicgovau_core_install_module('tide_test');
    }

    if ($environment == 'ci' || $environment == 'development') {
      vicgovau_core_install_module('vicgovau_demo');
    }
  }
  else {
    // Enable 'config_devel' in local environment only.
    if ($environment == 'local') {
      vicgovau_core_install_module('config_devel');
    }

    // Enable 'tide_test' in local and CI environments.
    if ($environment == 'local' || $environment == 'ci') {
      vicgovau_core_install_module('tide_test');
    }

    if ($environment == 'local' || $environment == 'ci' || $environment == 'development') {
      vicgovau_core_install_module('vicgovau_demo');
    }
  }
}

/**
 * Helper to enable modules.
 */
function vicgovau_core_default_content_modules() {
  vicgovau_core_install_module('default_content');
  \Drupal::service('default_content.importer')->importContent('vicgovau_core');
  \Drupal::service('module_installer')->uninstall(['default_content']);
}

/**
 * Helper to install a module.
 *
 * @param string $module
 *   Module name.
 *
 * @throws \Exception
 *   When module was not installed.
 */
function vicgovau_core_install_module($module) {
  $result = \Drupal::service('module_installer')->install([$module]);
  if (!$result) {
    throw new \Exception(sprintf('Unable to install module %s', $module));
  }

  /** @var \Drupal\Core\Extension\ModuleHandler $moduleHandler */
  $moduleHandler = \Drupal::service('module_handler');
  if (!$moduleHandler->moduleExists($module)) {
    throw new \Exception(sprintf('Unable to validate install for module %s', $module));
  }
}

/**
 * Creates sites and sections.
 */
function vicgovau_core_update_8001() {
  $sites = [
    'vic.gov.au' => [],
  ];

  $weight = 0;
  foreach ($sites as $site => $sections) {
    $term_site = Term::create([
      'name' => $site,
      'vid' => 'sites',
      'weight' => $weight,
    ]);
    $term_site->save();

    foreach ($sections as $section) {
      $term_section = Term::create([
        'name' => $section,
        'vid' => 'sites',
        'parent' => [$term_site->id()],
      ]);
      $term_section->save();
    }
    $weight++;
  }
}

/**
 * Assigns site_admin role to selected users.
 */
function vicgovau_core_update_8003() {
  $user_names = [
    'jessica.le',
  ];

  foreach ($user_names as $user_name) {
    /** @var \Drupal\user\Entity\User $user */
    $user = user_load_by_name($user_name);
    if (!$user) {
      throw new UpdateException(sprintf('Unable to update role for user "%s"', $user_name));
    }
    $user->addRole('site_admin');
    $user->removeRole('administrator');
    $user->removeRole('approver');
    $user->removeRole('editor');
    $user->removeRole('previewer');
    $user->save();
  }
}

/**
 * Remove the sitemap.xml entry from the traffic registry table [SDPA-453].
 */
function vicgovau_core_update_8004() {
  $moduleHandler = \Drupal::service('module_handler');
  if ($moduleHandler->moduleExists('purge_queuer_url')) {
    db_delete('purge_queuer_url')
      ->condition('url', 'sitemap.xml')
      ->execute();
  }
}

/**
 * Clear Traffic registry because of URLs_queuer config changes [SDPA-465].
 */
function vicgovau_core_update_8005() {
  $moduleHandler = \Drupal::service('module_handler');
  if ($moduleHandler->moduleExists('purge_queuer_url')) {
    \Drupal::service('purge_queuer_url.registry')->clear();
  }
}

/**
 * Create temporary field and add to paragraph bundle [SDPA-552].
 */
function vicgovau_core_update_8006() {
  // Create temporary field storage.
  FieldStorageConfig::create([
    'field_name' => 'field_paragraph_summary_temp',
    'entity_type' => 'paragraph',
    'type' => 'string_long',
    'cardinality' => 1,
  ])->save();

  // List all bundles that have field_paragraph_summary field.
  $bundles = \Drupal::service('entity_type.bundle.info')->getBundleInfo('paragraph');

  $entityFieldManager = \Drupal::service('entity_field.manager');

  foreach ($bundles as $bundle_key => $info) {
    $fields = $entityFieldManager->getFieldDefinitions('paragraph', $bundle_key);
    // Only add temp field to bundle that have field_paragraph_summary.
    if (isset($fields['field_paragraph_summary'])) {
      $field_storage = FieldStorageConfig::loadByName('paragraph', 'field_paragraph_summary_temp');
      $field = FieldConfig::loadByName('paragraph', $bundle_key, 'field_paragraph_summary_temp');

      if (empty($field)) {
        $field = FieldConfig::create([
          'field_storage' => $field_storage,
          'bundle' => $bundle_key,
          'label' => 'Summary Temp',
        ]);
        $field->save();
      }
    }
  }
}

/**
 * Migrating data to the temporary field using Batch API [SDPA-552].
 */
function vicgovau_core_update_8007(&$sandbox) {
  // List all bundles that have field_paragraph_summary field.
  $bundles = \Drupal::service('entity_type.bundle.info')->getBundleInfo('paragraph');

  $entityFieldManager = \Drupal::service('entity_field.manager');
  $need_bundles = [];
  foreach ($bundles as $bundle_key => $info) {
    $fields = $entityFieldManager->getFieldDefinitions('paragraph', $bundle_key);
    // Store bundle names that have field_paragraph_summary.
    if (isset($fields['field_paragraph_summary'])) {
      $need_bundles[] = $bundle_key;
    }
  }

  $query = Drupal::service('entity.query')->get('paragraph');

  if (!isset($sandbox['total'])) {
    $entity_ids = $query
      ->condition('type', $need_bundles, 'IN')
      ->count()
      ->execute();

    $sandbox['total'] = $entity_ids;
    $sandbox['current'] = 0;
  }

  $entity_per_batch = 25;

  $entity_ids = $query
    ->condition('type', $need_bundles, 'IN')
    ->range($sandbox['current'], $sandbox['current'] + $entity_per_batch)
    ->execute();

  if (is_array($entity_ids) && count($entity_ids) > 0) {
    foreach ($entity_ids as $id) {
      $entity = \Drupal::entityTypeManager()->getStorage('paragraph')->load($id);
      $fields = $entity->getFields();
      if (isset($fields['field_paragraph_summary']) && isset($fields['field_paragraph_summary_temp'])) {
        $entity->set('field_paragraph_summary_temp', $entity->get('field_paragraph_summary')->value);
        // We are not going to migrate revisions.
        $entity->setNewRevision(FALSE);
        $entity->save();
        $sandbox['current']++;
      }
    }
  }

  drupal_set_message($sandbox['current'] . ' field_paragraph_summary_temp processed.');

  $sandbox['#finished'] = ($sandbox['current'] / $sandbox['total']);
}

/**
 * Delete and re-create the field with new definitions [SDPA-552].
 */
function vicgovau_core_update_8008() {
  // No need to call field_purge_batch() after the field is deleted
  // as cron will take care of this process for us.
  $bundles = \Drupal::service('entity_type.bundle.info')->getBundleInfo('paragraph');
  $entityFieldManager = \Drupal::service('entity_field.manager');
  foreach ($bundles as $bundle_key => $info) {
    $fields = $entityFieldManager->getFieldDefinitions('paragraph', $bundle_key);
    if (isset($fields['field_paragraph_summary'])) {
      $fields['field_paragraph_summary']->delete();
    }
  }

  // Import the field back in using new config.
  module_load_include('inc', 'tide_core', 'includes/helpers');
  $config_location = [drupal_get_path('module', 'tide_landing_page') . '/config/install'];

  _tide_import_single_config('field.storage.paragraph.field_paragraph_summary', $config_location);
  _tide_import_single_config('field.field.paragraph.banner.field_paragraph_summary', $config_location);
  _tide_import_single_config('field.field.paragraph.card_event.field_paragraph_summary', $config_location);
  _tide_import_single_config('field.field.paragraph.card_navigation.field_paragraph_summary', $config_location);
  _tide_import_single_config('field.field.paragraph.card_navigation_featured.field_paragraph_summary', $config_location);
  _tide_import_single_config('field.field.paragraph.card_promotion.field_paragraph_summary', $config_location);
  _tide_import_single_config('field.field.paragraph.keydates.field_paragraph_summary', $config_location);
  _tide_import_single_config('field.field.paragraph.links.field_paragraph_summary', $config_location);
  _tide_import_single_config('field.field.paragraph.related_links.field_paragraph_summary', $config_location);
}

/**
 * Migrating data to new field using Batch API. [SDPA-552].
 */
function vicgovau_core_update_8009(&$sandbox) {
  // List all bundles that have field_paragraph_summary_temp field.
  $bundles = \Drupal::service('entity_type.bundle.info')->getBundleInfo('paragraph');
  /* @var $entityFieldManager Drupal\Core\Entity\EntityFieldManager */
  $entityFieldManager = \Drupal::service('entity_field.manager');
  $need_bundles = [];
  foreach ($bundles as $bundle_key => $info) {
    $fields = $entityFieldManager->getFieldDefinitions('paragraph', $bundle_key);
    // Store bundle names that have field_paragraph_summary_temp.
    if (isset($fields['field_paragraph_summary_temp'])) {
      $need_bundles[] = $bundle_key;
    }
  }

  $query = Drupal::service('entity.query')->get('paragraph');

  if (!isset($sandbox['total'])) {
    $entity_ids = $query
      ->condition('type', $need_bundles, 'IN')
      ->count()
      ->execute();

    $sandbox['total'] = $entity_ids;
    $sandbox['current'] = 0;
  }

  $entity_per_batch = 25;

  $entity_ids = $query
    ->condition('type', $need_bundles, 'IN')
    ->range($sandbox['current'], $sandbox['current'] + $entity_per_batch)
    ->execute();

  if (is_array($entity_ids) && count($entity_ids) > 0) {
    foreach ($entity_ids as $id) {
      $entity = \Drupal::entityTypeManager()->getStorage('paragraph')->load($id);
      $fields = $entity->getFields();
      if (isset($fields['field_paragraph_summary_temp']) && isset($fields['field_paragraph_summary'])) {
        // Strip out html tags when re-import.
        $entity->set('field_paragraph_summary', strip_tags($entity->get('field_paragraph_summary_temp')->value));
        $entity->setNewRevision(FALSE);
        $entity->save();
        $sandbox['current']++;
      }
    }
  }

  drupal_set_message($sandbox['current'] . ' field_paragraph_summary processed.');

  $sandbox['#finished'] = ($sandbox['current'] / $sandbox['total']);
}

/**
 * Delete temporary field. [SDPA-552].
 */
function vicgovau_core_update_8010() {
  // Still perform the deletion process because we created the temp field.
  $bundles = \Drupal::service('entity_type.bundle.info')->getBundleInfo('paragraph');
  $entityFieldManager = \Drupal::service('entity_field.manager');
  foreach ($bundles as $bundle_key => $info) {
    $fields = $entityFieldManager->getFieldDefinitions('paragraph', $bundle_key);
    if (isset($fields['field_paragraph_summary_temp'])) {
      $fields['field_paragraph_summary_temp']->delete();
    }
  }
}

/**
 * Create temporary fields and add to landing_page bundle [SDPA-740].
 */
function vicgovau_core_update_8011() {
  $temp_fields = ['field_primary_campaign_temp', 'field_secondary_campaign_temp'];

  foreach ($temp_fields as $temp_field) {
    // Create temporary field storage.
    FieldStorageConfig::create([
      'field_name' => $temp_field,
      'entity_type' => 'node',
      'type' => 'entity_reference',
      'settings' => [
        'target_type' => 'block_content',
      ],
      'module' => 'core',
      'cardinality' => 1,
      'dependencies' => [
        'module' => ['block_content', 'node'],
      ],
    ])->save();

    $field_storage = FieldStorageConfig::loadByName('node', $temp_field);
    $field = FieldConfig::loadByName('node', 'landing_page', $temp_field);

    // Create temporary field.
    if (empty($field)) {
      $field = FieldConfig::create([
        'field_storage' => $field_storage,
        'bundle' => 'landing_page',
        'label' => $temp_field,
        'dependencies' => [
          'config' => [
            'block_content.type.campaign',
            'field.storage.node.' . $temp_field,
            'node.type.landing_page',
          ],
        ],
        'settings' => [
          'handler' => 'default:block_content',
          'handler_settings' => [
            'target_bundles' => [
              'campaign' => 'campaign',
            ],
          ],
        ],
        'field_type' => 'entity_reference',
      ]);
      $field->save();
    }
  }
}

/**
 * Migrating data to temporary fields.
 */
function vicgovau_core_update_8012() {

  $connection = \Drupal::service('database');

  // Copy data for both type of landing pages,
  // the temp tables were created in hook vicgovau_core_update_8011.
  $landing_pages = ['primary', 'secondary'];

  foreach ($landing_pages as $page) {
    $base_table = 'node__field_landing_page_c_' . $page;
    $temp_table = 'node__field_' . $page . '_campaign_temp';

    $field_target = 'field_landing_page_c_' . $page . '_target_id';
    $field_target_revision = 'field_landing_page_c_' . $page . '_target_revision_id';

    $temp_field_target = 'field_' . $page . '_campaign_temp_target_id';

    if ($connection->schema()->tableExists($base_table) && $connection->schema()->tableExists($temp_table)) {
      $result = $connection->select($base_table, 'n')
        ->fields('n')
        ->execute()
        ->fetchAll();

      if ($total = count($result) > 0) {
        foreach ($result as $row) {
          // We are not migration revision.
          if (isset($row->$field_target_revision)) {
            unset($row->$field_target_revision);
          }
          // Map temp field for data copy.
          if (isset($row->$field_target)) {
            $row->$temp_field_target = $row->$field_target;
            unset($row->$field_target);
          }
          $connection->insert($temp_table)
            ->fields((array) $row)
            ->execute();
        }
        drupal_set_message($total . ' entries processed for table ' . $temp_table);
      }
    }
  }
}

/**
 * Delete and re-create the fields with new definitions [SDPA-740].
 */
function vicgovau_core_update_8013() {
  // No need to call field_purge_batch() after the field is deleted
  // as cron will take care of this process for us.
  $entityFieldManager = \Drupal::service('entity_field.manager');

  $fields = $entityFieldManager->getFieldDefinitions('node', 'landing_page');
  if (isset($fields['field_landing_page_c_primary'])) {
    $fields['field_landing_page_c_primary']->delete();
  }

  if (isset($fields['field_landing_page_c_secondary'])) {
    $fields['field_landing_page_c_secondary']->delete();
  }

  // Import the field back in using new config.
  module_load_include('inc', 'tide_core', 'includes/helpers');
  $config_location = [drupal_get_path('module', 'tide_landing_page') . '/config/install'];

  _tide_import_single_config('field.storage.node.field_landing_page_c_primary', $config_location);
  _tide_import_single_config('field.field.node.landing_page.field_landing_page_c_primary', $config_location);

  _tide_import_single_config('field.storage.node.field_landing_page_c_secondary', $config_location);
  _tide_import_single_config('field.field.node.landing_page.field_landing_page_c_secondary', $config_location);
}

/**
 * Migrating temp data back to newly created fields [SDPA-740].
 */
function vicgovau_core_update_8014() {

  $connection = \Drupal::service('database');

  // Copy data for both type of landing pages,
  // the temp tables were created in hook vicgovau_core_update_8011.
  $landing_pages = ['primary', 'secondary'];

  foreach ($landing_pages as $page) {
    $base_table = 'node__field_landing_page_c_' . $page;
    $temp_table = 'node__field_' . $page . '_campaign_temp';

    $field_target = 'field_landing_page_c_' . $page . '_target_id';

    $temp_field_target = 'field_' . $page . '_campaign_temp_target_id';

    if ($connection->schema()->tableExists($temp_table) && $connection->schema()->tableExists($base_table)) {
      $result = $connection->select($temp_table, 'n')
        ->fields('n')
        ->execute()
        ->fetchAll();

      if ($total = count($result) > 0) {
        foreach ($result as $row) {
          // Map field for data copy.
          if (isset($row->$temp_field_target)) {
            $row->$field_target = $row->$temp_field_target;
            unset($row->$temp_field_target);
          }
          $connection->insert($base_table)
            ->fields((array) $row)
            ->execute();
        }
        drupal_set_message($total . ' entries processed for table ' . $base_table);
      }
    }
  }
}

/**
 * Delete temporary fields. [SDPA-740].
 */
function vicgovau_core_update_8015() {
  // Still perform the deletion process because we created the temp field.
  $entityFieldManager = \Drupal::service('entity_field.manager');

  $fields = $entityFieldManager->getFieldDefinitions('node', 'landing_page');
  if (isset($fields['field_primary_campaign_temp'])) {
    $fields['field_primary_campaign_temp']->delete();
  }

  if (isset($fields['field_secondary_campaign_temp'])) {
    $fields['field_secondary_campaign_temp']->delete();
  }
}

/**
 * SDPA-309: Add Alert Types Taxonomy terms.
 */
function vicgovau_core_update_8016() {
  $alert_types = [
    'Emergency',
    'Fire',
    'Flood',
    'Medical',
    'Lightning',
    'Pollution',
    'Heat wave',
    'Traffic',
  ];

  foreach ($alert_types as $type) {
    Term::create([
      'parent' => [],
      'name' => $type,
      'vid' => 'alert_type',
    ]
    )->save();
  }
}

/**
 * SDPA-1502: Fix term name.
 */
function vicgovau_core_update_8017() {
  // Search for the incorrectly named term, and if found - rename.
  $query = \Drupal::entityQuery('taxonomy_term');
  $query->condition('vid', 'alert_type');
  $query->condition('name', 'Lightening');
  $result = $query->execute();

  foreach ($result as $term_id) {
    $term = Term::load($term_id);
    $term->setName('Lightning');
    $term->save();
  }
}

/**
 * SDPA-1700: Add Expertise vocabulary terms.
 */
function vicgovau_core_update_8018() {
  // Creates terms for Expertise vocabulary.
  $vid = 'expertise';

  $terms = [
    'Aboriginal affairs',
    'Advocacy and social justice',
    'Arts, culture and literature',
    'Business and finance',
    'Community',
    'Cultural diversity',
    'Design, architecture and planning',
    'Disability rights',
    'Education',
    'Energy, environment and sustainability',
    'Gender equality and women\'s rights',
    'Health',
    'History and heritage',
    'International development, foreign affairs and trade',
    'Law and justice',
    'LGBTI rights',
    'Media and communications',
    'Prevention of family violence',
    'Public service and government',
    'Regional and rural',
    'Science, technology, engineering and maths',
    'Sport and recreation'
  ];
  foreach ($terms as $term) {
    Term::create([
      'name' => $term,
      'vid' => $vid,
      'parent' => [],
    ])->save();
  }
}

